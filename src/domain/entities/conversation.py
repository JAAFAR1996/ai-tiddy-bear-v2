from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from uuid import UUID, uuid4

"""
Defines the Conversation entity, representing an interaction between a child and the AI.

This entity captures the details of a conversation, including its unique identifier,
associated child, start and end times, a summary, emotional analysis, and sentiment
score. It provides methods for creating, ending, and updating conversations,
as well as tracking their duration and activity status.
"""


class InteractionType(Enum):
    """Enumeration for different types of interactions within a conversation."""

    VOICE = "voice"
    TEXT = "text"


@dataclass
class Conversation:
    """Domain entity representing a conversation between a child and AI."""

    id: UUID
    child_id: UUID
    start_time: datetime
    end_time: datetime | None
    summary: str
    emotion_analysis: str
    sentiment_score: float

    @classmethod
    def create_new(
        cls,
        child_id: UUID,
        summary: str = "",
        emotion_analysis: str = "neutral",
        sentiment_score: float = 0.0,
    ) -> "Conversation":
        """Creates a new conversation instance.

        Args:
            child_id: The ID of the child participating in the conversation.
            summary: An initial summary of the conversation.
            emotion_analysis: Initial emotional analysis of the conversation.
            sentiment_score: Initial sentiment score of the conversation.

        Returns:
            A new Conversation instance.
        """
        return cls(
            id=uuid4(),
            child_id=child_id,
            start_time=datetime.utcnow(),
            end_time=None,
            summary=summary,
            emotion_analysis=emotion_analysis,
            sentiment_score=sentiment_score,
        )

    def end_conversation(
        self, summary: str, emotion_analysis: str, sentiment_score: float
    ) -> None:
        """Ends the conversation with analysis results.

        Args:
            summary: The final summary of the conversation.
            emotion_analysis: The final emotional analysis of the conversation.
            sentiment_score: The final sentiment score of the conversation.
        """
        self.end_time = datetime.utcnow()
        self.summary = summary
        self.emotion_analysis = emotion_analysis
        self.sentiment_score = sentiment_score

    def is_active(self) -> bool:
        """Checks if the conversation is still active.

        Returns:
            True if the conversation has not ended, False otherwise.
        """
        return self.end_time is None

    def duration_minutes(self) -> float | None:
        """Gets the conversation duration in minutes.

        Returns:
            The duration in minutes, or None if the conversation is still active.
        """
        if self.end_time is None:
            return None
        delta = self.end_time - self.start_time
        return delta.total_seconds() / 60.0

    def update_summary(self, summary: str) -> None:
        """Updates the conversation summary.

        Args:
            summary: The new summary for the conversation.
        """
        self.summary = summary

    def update_analysis(self, emotion_analysis: str, sentiment_score: float) -> None:
        """Updates the emotion analysis and sentiment score.

        Args:
            emotion_analysis: The new emotional analysis.
            sentiment_score: The new sentiment score.
        """
        self.emotion_analysis = emotion_analysis
        self.sentiment_score = sentiment_score

    def add_interaction(self, user_input: str, ai_response: str) -> None:
        """Adds a new interaction(user input and AI response) to the conversation.

        Args:
            user_input: The input provided by the user.
            ai_response: The response generated by the AI.
        """
        # This is a simplified representation. In a real system, interactions
        # might be stored as a list of separate objects within the
        # conversation.
        self.summary += f"\nUser: {user_input}\nAI: {ai_response}"
