# Pre-commit Configuration for AI Teddy Bear Project
# Ensures code quality before every commit

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-toml
      - id: check-json
      - id: pretty-format-json
        args: [--autofix, --indent=2]
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: detect-private-key
      - id: debug-statements
      - id: requirements-txt-fixer

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]
        exclude: ^(archived_legacy/|migrations/)

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        exclude: ^(archived_legacy/|migrations/)

  # Linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        additional_dependencies:
          - flake8-docstrings>=1.7.0
          - flake8-import-order>=0.18.2
          - flake8-bugbear>=23.7.10
        args: [--max-line-length=88, --max-complexity=10]
        exclude: ^(archived_legacy/|migrations/)

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.0
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-setuptools
          - types-PyYAML
        args: [--config-file=mypy.ini]
        exclude: ^(tests/|archived_legacy/|migrations/)

  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-c, .bandit]
        exclude: ^(tests/|archived_legacy/)

  # Dependency vulnerability scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--ignore=51457]  # Ignore specific vulnerabilities if needed

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: ^(tests/|archived_legacy/|migrations/)

  # Pytest testing
  - repo: local
    hooks:
      - id: pytest-unit
        name: pytest unit tests
        entry: pytest tests/unit/
        language: system
        pass_filenames: false
        args: [--maxfail=5, --tb=short, -q]
        always_run: false
        stages: [manual]

  # Complexity checking
  - repo: https://github.com/PyCQA/mccabe
    rev: 0.7.0
    hooks:
      - id: mccabe
        args: [--min=10]
        exclude: ^(tests/|archived_legacy/)

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0
    hooks:
      - id: prettier
        types: [yaml]
        exclude: ^(.github/workflows/)

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck
        args: [--severity=warning]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        args: [--ignore, DL3008, --ignore, DL3009]

  # Git commit message formatting
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v2.4.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [feat, fix, docs, style, refactor, test, chore, ci]

  # Local custom hooks
  - repo: local
    hooks:
      # Check for TODO/FIXME comments
      - id: check-todos
        name: Check for TODO/FIXME comments
        entry: bash -c 'if grep -r "TODO\|FIXME\|XXX\|HACK" --include="*.py" core/; then echo "Found TODO/FIXME comments. Please resolve before commit."; exit 1; fi'
        language: system
        pass_filenames: false

      # Check file sizes
      - id: check-large-files-custom
        name: Check for large files
        entry: bash -c 'find . -type f -size +500k -not -path "./.git/*" -not -path "./archived_legacy/*" -not -path "./.venv/*" | head -5'
        language: system
        pass_filenames: false

      # Ensure no print statements in production code
      - id: no-print-statements
        name: Check for print statements
        entry: bash -c 'if grep -r "print(" --include="*.py" core/ --exclude-dir=ui; then echo "Found print statements in production code. Use logging instead."; exit 1; fi'
        language: system
        pass_filenames: false

      # Check for proper docstrings
      - id: check-docstrings
        name: Check critical functions have docstrings
        entry: python scripts/check_docstrings.py
        language: system
        files: ^core/.*\.py$
        exclude: ^(tests/|archived_legacy/|__init__.py)

      # Performance regression check
      - id: performance-check
        name: Quick performance regression check
        entry: python scripts/performance_check.py
        language: system
        pass_filenames: false
        stages: [manual]

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: main
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pytest-unit, performance-check]
  submodules: false 