# Setup Configuration for AI Teddy Bear Project
# Centralized configuration for multiple tools

[metadata]
name = ai-teddy-bear
version = 2.0.0
description = AI-powered interactive teddy bear system - Enterprise Grade
long_description = file: README.md
long_description_content_type = text/markdown
author = TeddyBear Development Team
author_email = dev@teddybear.ai
maintainer = Senior Development Team
maintainer_email = dev@teddybear.ai
url = https://github.com/teddybear/ai-teddy-bear
project_urls =
    Bug Tracker = https://github.com/teddybear/ai-teddy-bear/issues
    Documentation = https://ai-teddy-bear.readthedocs.io/
    Source Code = https://github.com/teddybear/ai-teddy-bear
license = MIT
license_files = LICENSE
classifiers =
    Development Status :: 5 - Production/Stable
    Intended Audience :: Developers
    Intended Audience :: Education
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Topic :: Education
    Topic :: Software Development
    Topic :: Multimedia :: Sound/Audio
    Framework :: Pytest
keywords = ai, teddy-bear, audio, pyside6, iot, education

[options]
zip_safe = False
include_package_data = True
packages = find:
python_requires = >=3.9
install_requires =
    PySide6>=6.5.0
    structlog>=23.1.0
    numpy>=1.24.0
    asyncio-throttle>=1.0.2

[options.packages.find]
where = .
exclude =
    tests*
    archived_legacy*
    build*
    dist*

[options.extras_require]
audio =
    sounddevice>=0.4.6
    pyaudio>=0.2.11
    librosa>=0.10.0
    noisereduce>=3.0.0
    scipy>=1.11.0
advanced =
    psutil>=5.9.0
    aiohttp>=3.8.0
    websockets>=11.0.0
dev =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    black>=23.7.0
    mypy>=1.5.0
    flake8>=6.0.0
all =
    %(audio)s
    %(advanced)s

[options.entry_points]
console_scripts =
    teddy-bear = core.ui:main
    teddy-server = core.server:main

# Flake8 Configuration
[flake8]
max-line-length = 88
max-complexity = 10
extend-ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long
    W503,  # line break before binary operator
    E231,  # missing whitespace after ','
exclude = 
    .git,
    __pycache__,
    .pytest_cache,
    .mypy_cache,
    build,
    dist,
    *.egg-info,
    .venv,
    venv,
    archived_legacy,
    node_modules
per-file-ignores =
    __init__.py: F401, F403
    tests/*: D100, D101, D102, D103, D104, D105
    */migrations/*: D100, D101, D102, D103, D104, D105
select = E,W,F,C,N
import-order-style = google
application-import-names = core, tests
docstring-convention = google
statistics = True
count = True
show-source = True
benchmark = True

# Coverage Configuration
[coverage:run]
source = core
branch = True
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */.venv/*
    archived_legacy/*
    setup.py
    */site-packages/*
parallel = True
concurrency = multiprocessing, thread

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @overload
    # Type checking imports
    if sys.version_info

[coverage:html]
directory = htmlcov
title = AI Teddy Bear Coverage Report

[coverage:xml]
output = coverage.xml

# isort Configuration
[isort]
profile = black
multi_line_output = 3
line_length = 88
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True
src_paths = core, tests
skip = .venv, venv, .git, __pycache__, .pytest_cache, .mypy_cache, archived_legacy
known_first_party = core
known_third_party = 
    PySide6,
    numpy,
    structlog,
    pytest,
    sounddevice,
    librosa,
    scipy,
    psutil
sections = FUTURE, STDLIB, THIRDPARTY, FIRSTPARTY, LOCALFOLDER
import_heading_future = Future imports
import_heading_stdlib = Standard library imports  
import_heading_thirdparty = Third party imports
import_heading_firstparty = Local application imports
import_heading_localfolder = Local folder imports

# Bandit Security Configuration
[bandit]
exclude_dirs = tests, archived_legacy, .venv, venv, build, dist
skips = B101, B601

# Tool Configuration
[tool:pytest]
# This references our pytest.ini configuration

[egg_info]
tag_build = 
tag_date = 0 