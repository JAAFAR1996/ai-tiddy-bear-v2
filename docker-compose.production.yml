# AI Teddy Bear - Production Docker Configuration
# Enterprise-grade deployment with PostgreSQL, Redis, and security

version: '3.8'

services:
  # ================================
  # Main Application Service
  # ================================
  ai-teddy-backend:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        - BUILD_ENV=production
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse HEAD)}
        - BUILD_VERSION=${BUILD_VERSION:-1.0.0}
    image: ai-teddy-backend:production-${BUILD_VERSION:-1.0.0}
    container_name: ai-teddy-backend-prod
    restart: unless-stopped
    user: "1000:1000"  # Non-root user
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/logs:noexec,nosuid,size=500m
      - /app/tmp:noexec,nosuid,size=200m
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only for security
    environment:
      # Application Environment
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO

      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://ai_teddy_user:${DB_PASSWORD}@postgres-db:5432/ai_teddy_prod
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=0
      - DB_POOL_RECYCLE=300

      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-cache:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}

      # Security Keys (Must be set via environment variables)
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}

      # API Keys (Must be set via environment variables)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

      # Child Safety Configuration
      - COPPA_ENCRYPTION_KEY=${COPPA_ENCRYPTION_KEY}
      - MAX_CHILD_AGE=13
      - REQUIRE_PARENTAL_CONSENT=true
      - DATA_RETENTION_DAYS=90

      # Security Configuration
      - ENABLE_HTTPS=true
      - REQUIRE_SSL=true
      - SECURITY_HEADERS=true
      - RATE_LIMITING=true
      - SQL_INJECTION_PROTECTION=true

      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENABLED=true

      # Email Configuration
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FROM_EMAIL=noreply@aiteddy.com
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    networks:
      - ai-teddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # ================================
  # PostgreSQL Database Service
  # ================================
  postgres-db:
    image: postgres:15.8-alpine@sha256:36456aa1a5dd9f8cb8e66d0ee1896473e2cbec5afeb8a9b5e42b43e92e99b5ad
    container_name: ai-teddy-postgres-prod
    restart: unless-stopped
    user: "999:999"  # Non-root postgres user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
    environment:
      - POSTGRES_DB=ai_teddy_prod
      - POSTGRES_USER=ai_teddy_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256

      # Performance tuning for production
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_EFFECTIVE_CACHE_SIZE=4GB
      - POSTGRES_MAINTENANCE_WORK_MEM=256MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-backups:/backups
      - ./sql/init-production.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai-teddy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_teddy_user -d ai_teddy_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ================================
  # Redis Cache Service
  # ================================
  redis-cache:
    image: redis:7.2.5-alpine@sha256:8d49e7cebd148e81ac46eba08d0e8e9ac3ea2d7fdec9c0e9fedb9df94b438ee7
    container_name: ai-teddy-redis-prod
    restart: unless-stopped
    user: "999:999"  # Non-root redis user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - redis-config:/usr/local/etc/redis
    networks:
      - ai-teddy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # ================================
  # Nginx Reverse Proxy
  # ================================
  nginx-proxy:
    image: nginx:1.26.2-alpine@sha256:208b70eefac13ee9be00bd52d0c6604398f8b5e0f34ba4e9e0df1d97ee079c8b
    container_name: ai-teddy-nginx-prod
    restart: unless-stopped
    user: "101:101"  # Non-root nginx user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - ai-teddy-backend
    networks:
      - ai-teddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # Monitoring & Observability
  # ================================
  prometheus:
    image: prom/prometheus:v2.54.1@sha256:f6639335d34a77d9d9db382b92eeb7fc00934be8eae81dbc03b31cfe90411a8d
    container_name: ai-teddy-prometheus
    restart: unless-stopped
    user: "65534:65534"  # nobody user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ports:
      - "127.0.0.1:9090:9090"  # Bind to localhost only
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-200h}'
      - '--web.enable-lifecycle'
    networks:
      - ai-teddy-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  grafana:
    image: grafana/grafana:11.3.1@sha256:c7bab5fec9b89b5a9c6ad32e8a08b4b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b
    container_name: ai-teddy-grafana
    restart: unless-stopped
    user: "472:472"  # grafana user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/lib/grafana/plugins:noexec,nosuid,size=100m
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ai-teddy-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ================================
  # Log Management
  # ================================
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0@sha256:a4c4b8a5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b
    container_name: ai-teddy-filebeat
    restart: unless-stopped
    user: "1000:1000"  # Non-root filebeat user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app-logs:/app/logs:ro
      - nginx-logs:/nginx/logs:ro
    networks:
      - ai-teddy-network
    depends_on:
      - ai-teddy-backend

# ================================
# Networks
# ================================
networks:
  ai-teddy-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: ai-teddy-br0
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1

# ================================
# Volumes
# ================================
volumes:
  postgres-data:
    driver: local
    name: ai-teddy-postgres-data
  postgres-backups:
    driver: local
    name: ai-teddy-postgres-backups
  redis-data:
    driver: local
    name: ai-teddy-redis-data
  redis-config:
    driver: local
    name: ai-teddy-redis-config
  app-logs:
    driver: local
    name: ai-teddy-app-logs
  app-uploads:
    driver: local
    name: ai-teddy-app-uploads
  nginx-logs:
    driver: local
    name: ai-teddy-nginx-logs
  prometheus-data:
    driver: local
    name: ai-teddy-prometheus-data
  grafana-data:
    driver: local
    name: ai-teddy-grafana-data

# ================================
# Production Deployment Notes
# ================================
# 1. Set all environment variables in a secure .env file
# 2. Configure SSL certificates in ./ssl/ directory
# 3. Set up external backup strategy for postgres-data volume
# 4. Configure monitoring alerts in Prometheus/Grafana
# 5. Set up log rotation and retention policies
# 6. Configure firewall rules for production deployment
# 7. Use secrets management service in cloud deployments
# 8. Set up automated security scanning and updates
