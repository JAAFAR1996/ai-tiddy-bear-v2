{"dependencies": [{"name": "ai-teddy-bear", "skip_reason": "Dependency not found on PyPI and could not be audited: ai-teddy-bear (2.0.0)"}, {"name": "aiocache", "version": "0.12.2", "vulns": []}, {"name": "aiofiles", "version": "24.1.0", "vulns": []}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.9.2", "vulns": [{"id": "GHSA-7gpw-8wmc-pm8g", "fix_versions": ["3.9.4"], "description": "### Summary  A XSS vulnerability exists on index pages for static file handling.  ### Details  When using `web.static(..., show_index=True)`, the resulting index pages do not escape file names.  If users can upload files with arbitrary filenames to the static directory, the server is vulnerable to XSS attacks.  ### Workaround  We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected.  Other users can disable `show_index` if unable to upgrade.  -----  Patch: https://github.com/aio-libs/aiohttp/pull/8319/files"}, {"id": "GHSA-5m98-qgg9-wh84", "fix_versions": ["3.9.4"], "description": "### Summary An attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests.  ### Impact An attacker can stop the application from serving requests after sending a single request.  -------  For anyone needing to patch older versions of aiohttp, the minimum diff needed to resolve the issue is (located in `_read_chunk_from_length()`):  ```diff diff --git a/aiohttp/multipart.py b/aiohttp/multipart.py index 227be605c..71fc2654a 100644 --- a/aiohttp/multipart.py +++ b/aiohttp/multipart.py @@ -338,6 +338,8 @@ class BodyPartReader:          assert self._length is not None, \"Content-Length required for chunked read\"          chunk_size = min(size, self._length - self._read_bytes)          chunk = await self._content.read(chunk_size) +        if self._content.at_eof(): +            self._at_eof = True          return chunk        async def _read_chunk_from_stream(self, size: int) -> bytes: ```  This does however introduce some very minor issues with handling form data. So, if possible, it would be recommended to also backport the changes in: https://github.com/aio-libs/aiohttp/commit/cebe526b9c34dc3a3da9140409db63014bc4cf19 https://github.com/aio-libs/aiohttp/commit/7eecdff163ccf029fbb1ddc9de4169d4aaeb6597 https://github.com/aio-libs/aiohttp/commit/f21c6f2ca512a026ce7f0f6c6311f62d6a638866"}, {"id": "GHSA-8495-4g3g-x7pr", "fix_versions": ["3.10.11"], "description": "### Summary The Python parser parses newlines in chunk extensions incorrectly which can lead to request smuggling vulnerabilities under certain conditions.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or `AIOHTTP_NO_EXTENSIONS` is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  -----  Patch: https://github.com/aio-libs/aiohttp/commit/259edc369075de63e6f3a4eaade058c62af0df71"}, {"id": "GHSA-9548-qrrj-x5pj", "fix_versions": ["3.12.14"], "description": "### Summary The Python parser is vulnerable to a request smuggling vulnerability due to not parsing trailer sections of an HTTP request.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or AIOHTTP_NO_EXTENSIONS is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  ----  Patch: https://github.com/aio-libs/aiohttp/commit/e8d774f635dc6d1cd3174d0e38891da5de0e2b6a"}]}, {"name": "aiolimiter", "version": "1.2.1", "vulns": []}, {"name": "aioprocessing", "version": "2.0.1", "vulns": []}, {"name": "aioredis", "version": "2.0.1", "vulns": []}, {"name": "aiosignal", "version": "1.3.2", "vulns": []}, {"name": "aiosmtplib", "version": "3.0.1", "vulns": []}, {"name": "aiosqlite", "version": "0.19.0", "vulns": []}, {"name": "alembic", "version": "1.13.1", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anthropic", "version": "0.57.1", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "apscheduler", "version": "3.10.4", "vulns": []}, {"name": "argon2-cffi", "version": "23.1.0", "vulns": []}, {"name": "argon2-cffi-bindings", "version": "21.2.0", "vulns": []}, {"name": "ariadne", "version": "0.20.1", "vulns": []}, {"name": "arrow", "version": "1.3.0", "vulns": []}, {"name": "asgiref", "version": "3.8.1", "vulns": []}, {"name": "astor", "version": "0.8.1", "vulns": []}, {"name": "astroid", "version": "3.3.10", "vulns": []}, {"name": "asttokens", "version": "3.0.0", "vulns": []}, {"name": "async-lru", "version": "2.0.5", "vulns": []}, {"name": "async-timeout", "version": "5.0.1", "vulns": []}, {"name": "asyncio-mqtt", "version": "0.16.0", "vulns": []}, {"name": "asyncio-throttle", "version": "1.0.2", "vulns": []}, {"name": "asyncpg", "version": "0.29.0", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "audioread", "version": "3.0.1", "vulns": []}, {"name": "authlib", "version": "1.6.0", "vulns": []}, {"name": "autopep8", "version": "2.3.2", "vulns": []}, {"name": "avro", "version": "1.12.0", "vulns": []}, {"name": "azure-ai-contentsafety", "version": "1.0.0", "vulns": []}, {"name": "azure-ai-textanalytics", "version": "5.3.0", "vulns": []}, {"name": "azure-cognitiveservices-speech", "version": "1.34.1", "vulns": []}, {"name": "azure-common", "version": "1.1.28", "vulns": []}, {"name": "azure-core", "version": "1.34.0", "vulns": []}, {"name": "azure-storage-blob", "version": "12.25.1", "vulns": []}, {"name": "babel", "version": "2.17.0", "vulns": []}, {"name": "backoff", "version": "2.2.1", "vulns": []}, {"name": "baidusearch", "version": "1.0.3", "vulns": []}, {"name": "bandit", "version": "1.7.5", "vulns": []}, {"name": "bcrypt", "version": "4.3.0", "vulns": []}, {"name": "beartype", "version": "0.12.0", "vulns": []}, {"name": "beautifulsoup4", "version": "4.13.4", "vulns": []}, {"name": "bidict", "version": "0.23.1", "vulns": []}, {"name": "black", "version": "24.3.0", "vulns": []}, {"name": "bleach", "version": "6.2.0", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "blis", "version": "0.7.11", "vulns": []}, {"name": "boltons", "version": "21.0.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "boto3", "version": "1.37.38", "vulns": []}, {"name": "botocore", "version": "1.37.38", "vulns": []}, {"name": "bracex", "version": "2.6", "vulns": []}, {"name": "brotli", "version": "1.1.0", "vulns": []}, {"name": "browser-use", "version": "0.1.40", "vulns": [{"id": "GHSA-x39x-9qw5-ghrf", "fix_versions": ["0.1.45"], "description": "### Summary   During a manual source code review, [**ARIMLABS.AI**](https://arimlabs.ai) researchers identified that the `browser_use` module includes an embedded whitelist functionality to restrict URLs that can be visited. This restriction is enforced during agent initialization. However, it was discovered that these measures can be bypassed, leading to severe security implications.    ### Details   **File:** `browser_use/browser/context.py`    The `BrowserContextConfig` class defines an `allowed_domains` list, which is intended to limit accessible domains. This list is checked in the `_is_url_allowed()` method before navigation:  ```python @dataclass class BrowserContextConfig:     \"\"\"     [STRIPPED]     \"\"\"     cookies_file: str | None = None     minimum_wait_page_load_time: float = 0.5     wait_for_network_idle_page_load_time: float = 1     maximum_wait_page_load_time: float = 5     wait_between_actions: float = 1      disable_security: bool = True      browser_window_size: BrowserContextWindowSize = field(default_factory=lambda: {'width': 1280, 'height': 1100})     no_viewport: Optional[bool] = None      save_recording_path: str | None = None     save_downloads_path: str | None = None     trace_path: str | None = None     locale: str | None = None     user_agent: str = (         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'     )      highlight_elements: bool = True     viewport_expansion: int = 500     allowed_domains: list[str] | None = None     include_dynamic_attributes: bool = True      _force_keep_context_alive: bool = False ``` The _is_url_allowed() method is responsible for checking whether a given URL is permitted: ```python def _is_url_allowed(self, url: str) -> bool:     \"\"\"Check if a URL is allowed based on the whitelist configuration.\"\"\"     if not self.config.allowed_domains:         return True      try:         from urllib.parse import urlparse          parsed_url = urlparse(url)         domain = parsed_url.netloc.lower()          # Remove port number if present         if ':' in domain:             domain = domain.split(':')[0]          # Check if domain matches any allowed domain pattern         return any(             domain == allowed_domain.lower() or domain.endswith('.' + allowed_domain.lower())             for allowed_domain in self.config.allowed_domains         )     except Exception as e:         logger.error(f'Error checking URL allowlist: {str(e)}')         return False ``` The core issue stems from the line `domain = domain.split(':')[0]`, which allows an attacker to manipulate basic authentication credentials by providing a username:password pair. By replacing the username with a whitelisted domain, the check can be bypassed, even though the actual domain remains different. ### Proof of Concept (PoC)  Set allowed_domains to ['example.com'] and use the following URL:  https://example.com:pass@localhost:8080  This allows bypassing all whitelist controls and accessing restricted internal services. ### Impact  - Affected all users relying on this functionality for security. - Potential for unauthorized enumeration of localhost services and internal networks. - Ability to bypass domain whitelisting, leading to unauthorized browsing."}]}, {"name": "browsergym", "version": "0.13.3", "vulns": []}, {"name": "browsergym-assistantbench", "version": "0.13.3", "vulns": []}, {"name": "browsergym-core", "version": "0.13.3", "vulns": []}, {"name": "browsergym-experiments", "version": "0.13.3", "vulns": []}, {"name": "browsergym-miniwob", "version": "0.13.3", "vulns": []}, {"name": "browsergym-visualwebarena", "version": "0.13.3", "vulns": []}, {"name": "browsergym-webarena", "version": "0.13.3", "vulns": []}, {"name": "browsergym-workarena", "version": "0.4.2", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.5.2", "vulns": []}, {"name": "catalogue", "version": "2.0.10", "vulns": []}, {"name": "cerberus", "version": "1.3.5", "vulns": []}, {"name": "certifi", "version": "2025.4.26", "vulns": []}, {"name": "cffi", "version": "1.17.1", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "circuit-breaker", "skip_reason": "Dependency not found on PyPI and could not be audited: circuit-breaker (0.1.1)"}, {"name": "click", "version": "8.1.8", "vulns": []}, {"name": "click-option-group", "version": "0.5.7", "vulns": []}, {"name": "cloudpathlib", "version": "0.16.0", "vulns": []}, {"name": "cloudpickle", "version": "3.1.1", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "comm", "version": "0.2.2", "vulns": []}, {"name": "confection", "version": "0.1.5", "vulns": []}, {"name": "configargparse", "version": "1.7.1", "vulns": []}, {"name": "confluent-kafka", "version": "2.11.0", "vulns": []}, {"name": "contourpy", "version": "1.3.2", "vulns": []}, {"name": "coverage", "version": "7.9.1", "vulns": []}, {"name": "cryptography", "version": "43.0.1", "vulns": [{"id": "GHSA-79v4-65xg-pq4g", "fix_versions": ["44.0.1"], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 42.0.0-44.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20250211.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}]}, {"name": "cssselect2", "version": "0.8.0", "vulns": []}, {"name": "cursor-rules", "version": "0.5.1", "vulns": []}, {"name": "cycler", "version": "0.12.1", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "6.4.4", "vulns": []}, {"name": "cymem", "version": "2.0.11", "vulns": []}, {"name": "dataclasses-json", "version": "0.6.7", "vulns": []}, {"name": "datasets", "version": "3.4.1", "vulns": []}, {"name": "debugpy", "version": "1.8.14", "vulns": []}, {"name": "decorator", "version": "5.2.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "dependency-injector", "version": "4.41.0", "vulns": []}, {"name": "deprecated", "version": "1.2.18", "vulns": []}, {"name": "deptry", "version": "0.23.0", "vulns": []}, {"name": "dill", "version": "0.3.8", "vulns": []}, {"name": "distlib", "version": "0.3.9", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "dnspython", "version": "2.7.0", "vulns": []}, {"name": "docker", "version": "7.1.0", "vulns": []}, {"name": "dodgy", "version": "0.2.1", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "duckduckgo-search", "version": "7.5.5", "vulns": []}, {"name": "ecdsa", "version": "0.19.1", "vulns": []}, {"name": "editorconfig", "version": "0.17.1", "vulns": []}, {"name": "elevenlabs", "version": "1.0.1", "vulns": []}, {"name": "email-validator", "version": "2.1.0", "vulns": []}, {"name": "en-core-web-sm", "skip_reason": "Dependency not found on PyPI and could not be audited: en-core-web-sm (3.7.1)"}, {"name": "english-words", "version": "2.0.1", "vulns": []}, {"name": "et-xmlfile", "version": "2.0.0", "vulns": []}, {"name": "eval-type-backport", "version": "0.2.2", "vulns": []}, {"name": "evaluate", "version": "0.4.5", "vulns": []}, {"name": "exceptiongroup", "version": "1.3.0", "vulns": []}, {"name": "execnet", "version": "2.1.1", "vulns": []}, {"name": "executing", "version": "2.2.0", "vulns": []}, {"name": "face", "version": "24.0.0", "vulns": []}, {"name": "factory-boy", "version": "3.3.0", "vulns": []}, {"name": "faiss-cpu", "version": "1.8.0", "vulns": []}, {"name": "faker", "version": "20.1.0", "vulns": []}, {"name": "fancycompleter", "version": "0.11.1", "vulns": []}, {"name": "farama-notifications", "version": "0.0.4", "vulns": []}, {"name": "fastapi", "version": "0.115.5", "vulns": []}, {"name": "fastapi-limiter", "version": "0.1.6", "vulns": []}, {"name": "fastapi-users", "version": "14.0.1", "vulns": []}, {"name": "fastapi-users-db-sqlalchemy", "version": "7.0.0", "vulns": []}, {"name": "fastavro", "version": "1.11.1", "vulns": []}, {"name": "fastjsonschema", "version": "2.21.1", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "flake8", "version": "6.1.0", "vulns": []}, {"name": "flake8-polyfill", "version": "1.0.2", "vulns": []}, {"name": "flask", "version": "3.1.1", "vulns": []}, {"name": "flask-basicauth", "version": "0.2.0", "vulns": []}, {"name": "flask-cors", "version": "6.0.1", "vulns": []}, {"name": "flask-login", "version": "0.6.3", "vulns": []}, {"name": "fonttools", "version": "4.58.4", "vulns": []}, {"name": "fqdn", "version": "1.5.1", "vulns": []}, {"name": "freezegun", "version": "1.2.2", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "fsspec", "version": "2024.12.0", "vulns": []}, {"name": "gensim", "version": "4.3.3", "vulns": []}, {"name": "gevent", "version": "25.5.1", "vulns": []}, {"name": "geventhttpclient", "version": "2.3.4", "vulns": []}, {"name": "ghp-import", "version": "2.1.0", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "gitpython", "version": "3.1.44", "vulns": []}, {"name": "glom", "version": "22.1.0", "vulns": []}, {"name": "google-api-core", "version": "2.25.1", "vulns": []}, {"name": "google-auth", "version": "2.40.3", "vulns": []}, {"name": "google-cloud-core", "version": "2.4.3", "vulns": []}, {"name": "google-cloud-language", "version": "2.13.4", "vulns": []}, {"name": "google-cloud-storage", "version": "3.1.1", "vulns": []}, {"name": "google-crc32c", "version": "1.7.1", "vulns": []}, {"name": "google-resumable-media", "version": "2.7.2", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.70.0", "vulns": []}, {"name": "googlesearch-python", "version": "1.3.0", "vulns": []}, {"name": "graphene", "version": "3.4.3", "vulns": []}, {"name": "graphql-core", "version": "3.2.6", "vulns": []}, {"name": "graphql-relay", "version": "3.2.0", "vulns": []}, {"name": "greenlet", "version": "3.2.3", "vulns": []}, {"name": "grpcio", "version": "1.60.0", "vulns": []}, {"name": "grpcio-status", "version": "1.71.0", "vulns": []}, {"name": "grpcio-tools", "version": "1.60.0", "vulns": []}, {"name": "gtts", "version": "2.4.0", "vulns": []}, {"name": "gymnasium", "version": "1.1.1", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "hiredis", "version": "2.3.2", "vulns": []}, {"name": "html2text", "version": "2024.2.26", "vulns": []}, {"name": "html5lib", "version": "1.1", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.26.0", "vulns": []}, {"name": "httpx-sse", "version": "0.4.1", "vulns": []}, {"name": "huggingface-hub", "version": "0.29.3", "vulns": []}, {"name": "hume", "version": "0.9.0", "vulns": []}, {"name": "hvac", "version": "2.1.0", "vulns": []}, {"name": "hypothesis", "version": "6.135.26", "vulns": []}, {"name": "identify", "version": "2.6.12", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "imageio", "version": "2.37.0", "vulns": []}, {"name": "importlib-metadata", "version": "6.11.0", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "injector", "version": "0.21.0", "vulns": []}, {"name": "ipdb", "version": "0.13.13", "vulns": []}, {"name": "ipykernel", "version": "6.29.5", "vulns": []}, {"name": "ipython", "version": "8.17.2", "vulns": []}, {"name": "ipython-pygments-lexers", "version": "1.1.1", "vulns": []}, {"name": "ipywidgets", "version": "8.1.7", "vulns": []}, {"name": "iso8601", "version": "2.0.0", "vulns": []}, {"name": "isodate", "version": "0.7.2", "vulns": []}, {"name": "isoduration", "version": "20.11.0", "vulns": []}, {"name": "isort", "version": "5.13.2", "vulns": []}, {"name": "itsdangerous", "version": "2.2.0", "vulns": []}, {"name": "jedi", "version": "0.19.2", "vulns": []}, {"name": "jinja2", "version": "3.1.3", "vulns": [{"id": "GHSA-h75v-3vvj-5mfj", "fix_versions": ["3.1.4"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.  Accepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe."}, {"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "jiter", "version": "0.10.0", "vulns": []}, {"name": "jmespath", "version": "1.0.1", "vulns": []}, {"name": "joblib", "version": "1.5.1", "vulns": []}, {"name": "jsbeautifier", "version": "1.15.4", "vulns": []}, {"name": "json5", "version": "0.12.0", "vulns": []}, {"name": "jsonpatch", "version": "1.33", "vulns": []}, {"name": "jsonpointer", "version": "3.0.0", "vulns": []}, {"name": "jsonschema", "version": "4.24.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.4.1", "vulns": []}, {"name": "jupyter", "version": "1.0.0", "vulns": []}, {"name": "jupyter-client", "version": "8.6.3", "vulns": []}, {"name": "jupyter-console", "version": "6.6.3", "vulns": []}, {"name": "jupyter-core", "version": "5.8.1", "vulns": []}, {"name": "jupyter-events", "version": "0.12.0", "vulns": []}, {"name": "jupyter-lsp", "version": "2.2.5", "vulns": []}, {"name": "jupyter-server", "version": "2.16.0", "vulns": []}, {"name": "jupyter-server-terminals", "version": "0.5.3", "vulns": []}, {"name": "jupyterlab", "version": "4.0.13", "vulns": []}, {"name": "jupyterlab-pygments", "version": "0.3.0", "vulns": []}, {"name": "jupyterlab-server", "version": "2.27.3", "vulns": []}, {"name": "jupyterlab-widgets", "version": "3.0.15", "vulns": []}, {"name": "kiwisolver", "version": "1.4.8", "vulns": []}, {"name": "kubernetes", "version": "28.1.0", "vulns": []}, {"name": "langchain-anthropic", "version": "0.3.3", "vulns": []}, {"name": "langchain-core", "version": "0.3.68", "vulns": []}, {"name": "langchain-ollama", "version": "0.2.2", "vulns": []}, {"name": "langchain-openai", "version": "0.3.1", "vulns": []}, {"name": "langcodes", "version": "3.5.0", "vulns": []}, {"name": "langsmith", "version": "0.4.5", "vulns": []}, {"name": "language-data", "version": "1.3.0", "vulns": []}, {"name": "lazy-loader", "version": "0.4", "vulns": []}, {"name": "librosa", "version": "0.10.1", "vulns": []}, {"name": "libvisualwebarena", "version": "0.0.15", "vulns": []}, {"name": "libwebarena", "version": "0.0.4", "vulns": []}, {"name": "license-expression", "version": "30.4.3", "vulns": []}, {"name": "limits", "version": "5.4.0", "vulns": []}, {"name": "line-profiler", "version": "4.1.3", "vulns": []}, {"name": "llvmlite", "version": "0.44.0", "vulns": []}, {"name": "locust", "version": "2.17.0", "vulns": []}, {"name": "locust-cloud", "version": "1.24.2", "vulns": []}, {"name": "loguru", "version": "0.7.3", "vulns": []}, {"name": "lxml", "version": "6.0.0", "vulns": []}, {"name": "makefun", "version": "1.16.0", "vulns": []}, {"name": "mako", "version": "1.3.10", "vulns": []}, {"name": "marisa-trie", "version": "1.2.1", "vulns": []}, {"name": "markdown", "version": "3.8.2", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markdown2", "version": "2.5.3", "vulns": []}, {"name": "markdownify", "version": "0.14.1", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "3.20.2", "vulns": []}, {"name": "matplotlib", "version": "3.8.2", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.7", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mcp", "version": "1.5.0", "vulns": [{"id": "GHSA-3qhf-m339-9g5v", "fix_versions": ["1.9.4"], "description": "A validation error in the MCP SDK can cause an unhandled exception when processing malformed requests, resulting in service unavailability (500 errors) until manually restarted. Impact may vary depending on the deployment conditions, and presence of infrastructure-level resilience measures.  Thank you to Rich Harang for reporting this issue."}, {"id": "GHSA-j975-95f5-7wqh", "fix_versions": ["1.10.0"], "description": "If a client deliberately triggers an exception after establishing a streamable HTTP session, this can lead to an uncaught ClosedResourceError on the server side, causing the server to crash and requiring a restart to restore service. Impact may vary depending on the deployment conditions, and presence of infrastructure-level resilience measures.  Thank you to Rich Harang for reporting this issue."}]}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "memory-profiler", "version": "0.61.0", "vulns": []}, {"name": "mergedeep", "version": "1.3.4", "vulns": []}, {"name": "mistune", "version": "3.1.3", "vulns": []}, {"name": "mkdocs", "version": "1.5.3", "vulns": []}, {"name": "mkdocs-material", "version": "9.4.14", "vulns": []}, {"name": "mkdocs-material-extensions", "version": "1.3.1", "vulns": []}, {"name": "mkdocs-mermaid2-plugin", "version": "1.1.1", "vulns": []}, {"name": "more-itertools", "version": "10.7.0", "vulns": []}, {"name": "motor", "version": "3.3.2", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.0.8", "vulns": []}, {"name": "multidict", "version": "6.5.1", "vulns": []}, {"name": "multiprocess", "version": "0.70.16", "vulns": []}, {"name": "murmurhash", "version": "1.0.13", "vulns": []}, {"name": "mypy", "version": "1.9.0", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "narwhals", "version": "1.44.0", "vulns": []}, {"name": "nbclient", "version": "0.10.2", "vulns": []}, {"name": "nbconvert", "version": "7.16.6", "vulns": []}, {"name": "nbformat", "version": "5.10.4", "vulns": []}, {"name": "nest-asyncio", "version": "1.6.0", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "noisereduce", "version": "3.0.2", "vulns": []}, {"name": "notebook", "version": "7.0.8", "vulns": []}, {"name": "notebook-shim", "version": "0.2.4", "vulns": []}, {"name": "numba", "version": "0.61.2", "vulns": []}, {"name": "numpy", "version": "1.26.4", "vulns": []}, {"name": "oauthlib", "version": "3.3.1", "vulns": []}, {"name": "ollama", "version": "0.5.1", "vulns": []}, {"name": "openai", "version": "1.55.0", "vulns": []}, {"name": "openai-whisper", "version": "20231117", "vulns": []}, {"name": "openpyxl", "version": "3.1.5", "vulns": []}, {"name": "opentelemetry-api", "version": "1.22.0", "vulns": []}, {"name": "opentelemetry-exporter-prometheus", "version": "1.12.0rc1", "vulns": []}, {"name": "opentelemetry-instrumentation", "version": "0.43b0", "vulns": []}, {"name": "opentelemetry-instrumentation-asgi", "version": "0.43b0", "vulns": []}, {"name": "opentelemetry-instrumentation-fastapi", "version": "0.43b0", "vulns": []}, {"name": "opentelemetry-instrumentation-logging", "version": "0.48b0", "vulns": []}, {"name": "opentelemetry-instrumentation-redis", "version": "0.43b0", "vulns": []}, {"name": "opentelemetry-instrumentation-sqlalchemy", "version": "0.43b0", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.22.0", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.43b0", "vulns": []}, {"name": "opentelemetry-util-http", "version": "0.43b0", "vulns": []}, {"name": "orjson", "version": "3.9.15", "vulns": []}, {"name": "overrides", "version": "7.7.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.1", "vulns": []}, {"name": "packaging", "version": "24.2", "vulns": []}, {"name": "paginate", "version": "0.5.7", "vulns": []}, {"name": "paho-mqtt", "version": "2.1.0", "vulns": []}, {"name": "pandas", "version": "2.2.0", "vulns": []}, {"name": "pandocfilters", "version": "1.5.1", "vulns": []}, {"name": "parso", "version": "0.8.4", "vulns": []}, {"name": "passlib", "version": "1.7.4", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pdbpp", "version": "0.10.3", "vulns": []}, {"name": "pdfkit", "version": "1.0.0", "vulns": []}, {"name": "peewee", "version": "3.18.2", "vulns": []}, {"name": "pep8-naming", "version": "0.10.0", "vulns": []}, {"name": "pillow", "version": "11.1.0", "vulns": []}, {"name": "pip", "version": "25.1.1", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.6.3", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "playwright", "version": "1.51.0", "vulns": []}, {"name": "plotly", "version": "5.18.0", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "pooch", "version": "1.8.2", "vulns": []}, {"name": "portalocker", "version": "3.2.0", "vulns": []}, {"name": "posthog", "version": "6.1.0", "vulns": []}, {"name": "pprintpp", "version": "0.4.0", "vulns": []}, {"name": "pre-commit", "version": "3.4.0", "vulns": []}, {"name": "preshed", "version": "3.0.10", "vulns": []}, {"name": "primp", "version": "0.15.0", "vulns": []}, {"name": "prometheus-client", "version": "0.19.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "prospector", "version": "1.17.2", "vulns": []}, {"name": "proto-plus", "version": "1.26.1", "vulns": []}, {"name": "protobuf", "version": "4.25.8", "vulns": []}, {"name": "psutil", "version": "6.1.1", "vulns": []}, {"name": "pure-eval", "version": "0.2.3", "vulns": []}, {"name": "pwdlib", "version": "0.2.1", "vulns": []}, {"name": "py-cpuinfo", "version": "9.0.0", "vulns": []}, {"name": "py-serializable", "version": "1.1.2", "vulns": []}, {"name": "py-spy", "version": "0.4.0", "vulns": []}, {"name": "pyan3", "version": "1.2.0", "vulns": []}, {"name": "pyarrow", "version": "20.0.0", "vulns": []}, {"name": "pyasn1", "version": "0.6.1", "vulns": []}, {"name": "pyasn1-modules", "version": "0.4.1", "vulns": []}, {"name": "pyaudio", "version": "0.2.14", "vulns": []}, {"name": "pycodestyle", "version": "2.11.1", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pycryptodome", "version": "3.23.0", "vulns": []}, {"name": "pydantic", "version": "2.10.2", "vulns": []}, {"name": "pydantic-core", "version": "2.27.1", "vulns": []}, {"name": "pydantic-extra-types", "version": "2.1.0", "vulns": []}, {"name": "pydantic-settings", "version": "2.1.0", "vulns": []}, {"name": "pydeps", "version": "3.0.1", "vulns": []}, {"name": "pydocstyle", "version": "6.3.0", "vulns": []}, {"name": "pydub", "version": "0.25.1", "vulns": []}, {"name": "pydyf", "version": "0.11.0", "vulns": []}, {"name": "pyee", "version": "12.1.1", "vulns": []}, {"name": "pyflakes", "version": "3.1.0", "vulns": []}, {"name": "pygame", "version": "2.5.2", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pyjwt", "version": "2.10.1", "vulns": []}, {"name": "pylint", "version": "3.3.7", "vulns": []}, {"name": "pylint-celery", "version": "0.3", "vulns": []}, {"name": "pylint-django", "version": "2.6.1", "vulns": []}, {"name": "pylint-plugin-utils", "version": "0.9.0", "vulns": []}, {"name": "pymdown-extensions", "version": "10.16", "vulns": []}, {"name": "pymongo", "version": "4.13.2", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "pyphen", "version": "0.17.2", "vulns": []}, {"name": "pyreadline3", "version": "3.5.4", "vulns": []}, {"name": "pyrepl", "version": "0.11.3.post1", "vulns": []}, {"name": "pyrubberband", "version": "0.3.0", "vulns": []}, {"name": "pyside6", "version": "6.9.1", "vulns": []}, {"name": "pyside6-addons", "version": "6.9.1", "vulns": []}, {"name": "pyside6-essentials", "version": "6.9.1", "vulns": []}, {"name": "pysoundfile", "version": "0.9.0.post1", "vulns": []}, {"name": "pytest", "version": "8.0.2", "vulns": []}, {"name": "pytest-asyncio", "version": "0.23.8", "vulns": []}, {"name": "pytest-base-url", "version": "2.1.0", "vulns": []}, {"name": "pytest-benchmark", "version": "4.0.0", "vulns": []}, {"name": "pytest-clarity", "version": "1.0.1", "vulns": []}, {"name": "pytest-cov", "version": "5.0.0", "vulns": []}, {"name": "pytest-html", "version": "4.1.1", "vulns": []}, {"name": "pytest-metadata", "version": "3.1.1", "vulns": []}, {"name": "pytest-mock", "version": "3.11.1", "vulns": []}, {"name": "pytest-playwright", "version": "0.7.0", "vulns": []}, {"name": "pytest-sugar", "version": "1.0.0", "vulns": []}, {"name": "pytest-timeout", "version": "2.2.0", "vulns": []}, {"name": "pytest-xdist", "version": "3.5.0", "vulns": []}, {"name": "python-consul", "version": "1.1.0", "vulns": []}, {"name": "python-dateutil", "version": "2.8.2", "vulns": []}, {"name": "python-dotenv", "version": "1.0.0", "vulns": []}, {"name": "python-engineio", "version": "4.12.2", "vulns": []}, {"name": "python-jose", "version": "3.3.0", "vulns": [{"id": "PYSEC-2024-232", "fix_versions": ["3.4.0"], "description": "python-jose through 3.3.0 has algorithm confusion with OpenSSH ECDSA keys and other key formats. This is similar to CVE-2022-29217."}, {"id": "PYSEC-2024-233", "fix_versions": ["3.4.0"], "description": "python-jose through 3.3.0 allows attackers to cause a denial of service (resource consumption) during a decode via a crafted JSON Web Encryption (JWE) token with a high compression ratio, aka a \"JWT bomb.\" This is similar to CVE-2024-21319."}]}, {"name": "python-json-logger", "version": "3.3.0", "vulns": []}, {"name": "python-lsp-jsonrpc", "version": "1.0.0", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "python-slugify", "version": "8.0.4", "vulns": []}, {"name": "python-socketio", "version": "5.13.0", "vulns": []}, {"name": "pytz", "version": "2023.3", "vulns": []}, {"name": "pywin32", "version": "310", "vulns": []}, {"name": "pywinpty", "version": "2.0.15", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "pyyaml-env-tag", "version": "1.1", "vulns": []}, {"name": "pyzmq", "version": "27.0.0", "vulns": []}, {"name": "qtconsole", "version": "5.6.1", "vulns": []}, {"name": "qtpy", "version": "2.4.3", "vulns": []}, {"name": "redis", "version": "5.0.1", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "reportlab", "version": "4.4.2", "vulns": []}, {"name": "requests", "version": "2.31.0", "vulns": [{"id": "GHSA-9wx4-h78v-vm56", "fix_versions": ["2.32.0"], "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.  ### Remediation Any of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.  * Upgrade to `requests>=2.32.0`. * For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session. * For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.  ### Related Links * https://github.com/psf/requests/pull/6655"}, {"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "requests-oauthlib", "version": "2.0.0", "vulns": []}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "requirements-detector", "version": "1.4.0", "vulns": []}, {"name": "requirements-parser", "version": "0.13.0", "vulns": []}, {"name": "responses", "version": "0.24.1", "vulns": []}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3986-validator", "version": "0.1.1", "vulns": []}, {"name": "rich", "version": "13.7.0", "vulns": []}, {"name": "roundrobin", "version": "0.0.4", "vulns": []}, {"name": "rpds-py", "version": "0.25.1", "vulns": []}, {"name": "rsa", "version": "4.9.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.17.40", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "ruff", "version": "0.4.0", "vulns": []}, {"name": "s3transfer", "version": "0.11.5", "vulns": []}, {"name": "sacrebleu", "version": "2.5.1", "vulns": []}, {"name": "safetensors", "version": "0.5.3", "vulns": []}, {"name": "safety", "version": "2.3.4", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "scikit-image", "version": "0.25.2", "vulns": []}, {"name": "scikit-learn", "version": "1.7.0", "vulns": []}, {"name": "scipy", "version": "1.13.1", "vulns": []}, {"name": "seaborn", "version": "0.13.1", "vulns": []}, {"name": "secure", "version": "0.3.0", "vulns": []}, {"name": "semantic-version", "version": "2.10.0", "vulns": []}, {"name": "semgrep", "version": "1.45.0", "vulns": []}, {"name": "semver", "version": "3.0.4", "vulns": []}, {"name": "send2trash", "version": "1.8.3", "vulns": []}, {"name": "sentence-transformers", "version": "4.1.0", "vulns": []}, {"name": "sentry-sdk", "version": "1.39.1", "vulns": [{"id": "GHSA-g92j-qhmh-64v2", "fix_versions": ["1.45.1", "2.8.0"], "description": "### Impact  The bug in Sentry's Python SDK <2.8.0 results in the unintentional exposure of environment variables to subprocesses despite the `env={}` setting.  ### Details  In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls, like in this example:  ``` >>> subprocess.check_output([\"env\"], env={\"TEST\":\"1\"}) b'TEST=1\\n' ```  If you'd want to not pass any variables, you can set an empty dict:  ``` >>> subprocess.check_output([\"env\"], env={}) b'' ```  However, the bug in Sentry SDK <2.8.0 causes **all environment variables** to be passed to the subprocesses when `env={}` is set, unless the Sentry SDK's [Stdlib](https://docs.sentry.io/platforms/python/integrations/default-integrations/#stdlib) integration is disabled. The Stdlib integration is enabled by default.  ### Patches The issue has been patched in https://github.com/getsentry/sentry-python/pull/3251 and the fix released in [sentry-sdk==2.8.0](https://github.com/getsentry/sentry-python/releases/tag/2.8.0). The fix was also backported to [sentry-sdk==1.45.1](https://github.com/getsentry/sentry-python/releases/tag/1.45.1).  ### Workarounds  We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, there are two options:  1. In your application, replace `env={}` with the minimal dict `env={\"EMPTY_ENV\":\"1\"}` or similar.  OR  2. Disable Stdlib integration: ``` import sentry_sdk  # Should go before sentry_sdk.init sentry_sdk.integrations._DEFAULT_INTEGRATIONS.remove(\"sentry_sdk.integrations.stdlib.StdlibIntegration\")  sentry_sdk.init(...) ```  ### References * Sentry docs: [Default integrations](https://docs.sentry.io/platforms/python/integrations/default-integrations/) * Python docs: [subprocess module](https://docs.python.org/3/library/subprocess.html) * Patch https://github.com/getsentry/sentry-python/pull/3251"}]}, {"name": "setoptconf-tmp", "version": "0.3.1", "vulns": []}, {"name": "setuptools", "version": "75.8.2", "vulns": [{"id": "PYSEC-2025-49", "fix_versions": ["78.1.1"], "description": "setuptools is a package that allows users to download, build, install, upgrade, and uninstall Python packages. A path traversal vulnerability in `PackageIndex` is present in setuptools prior to version 78.1.1. An attacker would be allowed to write files to arbitrary locations on the filesystem with the permissions of the process running the Python code, which could escalate to remote code execution depending on the context. Version 78.1.1 fixes the issue."}]}, {"name": "setuptools-rust", "version": "1.11.1", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "shiboken6", "version": "6.9.1", "vulns": []}, {"name": "simple-websocket", "version": "1.1.0", "vulns": []}, {"name": "simpleaudio", "version": "1.0.4", "vulns": []}, {"name": "six", "version": "1.16.0", "vulns": []}, {"name": "slowapi", "version": "0.1.9", "vulns": []}, {"name": "smart-open", "version": "6.4.0", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "snakefood3", "version": "0.0.7", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "snowballstemmer", "version": "3.0.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "sounddevice", "version": "0.4.6", "vulns": []}, {"name": "soundfile", "version": "0.12.1", "vulns": []}, {"name": "soupsieve", "version": "2.7", "vulns": []}, {"name": "soxr", "version": "0.5.0.post1", "vulns": []}, {"name": "spacy", "version": "3.7.2", "vulns": []}, {"name": "spacy-legacy", "version": "3.0.12", "vulns": []}, {"name": "spacy-loggers", "version": "1.0.5", "vulns": []}, {"name": "speechrecognition", "version": "3.10.0", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.25", "vulns": []}, {"name": "sqlmodel", "version": "0.0.24", "vulns": []}, {"name": "srsly", "version": "2.5.1", "vulns": []}, {"name": "sse-starlette", "version": "2.4.1", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "starlette", "version": "0.41.3", "vulns": [{"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "stdlib-list", "version": "0.11.1", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "strawberry-graphql", "version": "0.276.0", "vulns": []}, {"name": "structlog", "version": "23.2.0", "vulns": []}, {"name": "sympy", "version": "1.14.0", "vulns": []}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "tenacity", "version": "9.0.0", "vulns": []}, {"name": "termcolor", "version": "3.1.0", "vulns": []}, {"name": "terminado", "version": "0.18.1", "vulns": []}, {"name": "text-generation", "version": "0.7.0", "vulns": [{"id": "GHSA-qq99-p57r-g3v7", "fix_versions": ["2.0.0"], "description": "A code injection vulnerability exists in the huggingface/text-generation-inference repository, specifically within the `autodocs.yml` workflow file. The vulnerability arises from the insecure handling of the `github.head_ref` user input, which is used to dynamically construct a command for installing a software package. An attacker can exploit this by forking the repository, creating a branch with a malicious payload as the name, and then opening a pull request to the base repository. Successful exploitation could lead to arbitrary code execution within the context of the GitHub Actions runner. This issue affects versions up to and including v2.0.0 and was fixed in version 2.0.0."}]}, {"name": "text-unidecode", "version": "1.3", "vulns": []}, {"name": "thinc", "version": "8.2.5", "vulns": []}, {"name": "threadpoolctl", "version": "3.6.0", "vulns": []}, {"name": "thrift", "version": "0.22.0", "vulns": []}, {"name": "tifffile", "version": "2025.6.11", "vulns": []}, {"name": "tiktoken", "version": "0.9.0", "vulns": []}, {"name": "time-machine", "version": "2.13.0", "vulns": []}, {"name": "tinycss2", "version": "1.4.0", "vulns": []}, {"name": "tinyhtml5", "version": "2.0.0", "vulns": []}, {"name": "tokenizers", "version": "0.21.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.0.2", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "torch", "version": "2.2.0", "vulns": [{"id": "PYSEC-2025-41", "fix_versions": ["2.6.0"], "description": "PyTorch is a Python package that provides tensor computation with strong GPU acceleration and deep neural networks built on a tape-based autograd system. In version 2.5.1 and prior, a Remote Command Execution (RCE) vulnerability exists in PyTorch when loading a model using torch.load with weights_only=True. This issue has been patched in version 2.6.0."}, {"id": "PYSEC-2024-259", "fix_versions": ["2.5.0"], "description": "In PyTorch <=2.4.1, the RemoteModule has Deserialization RCE. NOTE: this is disputed by multiple parties because this is intended behavior in PyTorch distributed computing."}, {"id": "GHSA-3749-ghw9-m3mg", "fix_versions": ["2.7.1rc1"], "description": "A vulnerability, which was classified as problematic, has been found in PyTorch 2.6.0+cu124. Affected by this issue is the function torch.mkldnn_max_pool2d. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used."}, {"id": "GHSA-887c-mr87-cxwp", "fix_versions": [], "description": "A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue."}]}, {"name": "tornado", "version": "6.5.1", "vulns": []}, {"name": "tqdm", "version": "4.66.6", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "transformers", "version": "4.50.3", "vulns": [{"id": "GHSA-489j-g2vx-39wf", "fix_versions": ["4.51.0"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the huggingface/transformers repository, specifically in version 4.49.0. The vulnerability is due to inefficient regular expression complexity in the `SETTING_RE` variable within the `transformers/commands/chat.py` file. The regex contains repetition groups and non-optimized quantifiers, leading to exponential backtracking when processing 'almost matching' payloads. This can degrade application performance and potentially result in a denial-of-service (DoS) when handling specially crafted input strings. The issue is fixed in version 4.51.0."}, {"id": "GHSA-q2wp-rjmx-x6x9", "fix_versions": ["4.51.0"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_configuration_file()` function within the `transformers.configuration_utils` module. The affected version is 4.49.0, and the issue is resolved in version 4.51.0. The vulnerability arises from the use of a regular expression pattern `config\\.(.*)\\.json` that can be exploited to cause excessive CPU consumption through crafted input strings, leading to catastrophic backtracking. This can result in model serving disruption, resource exhaustion, and increased latency in applications using the library."}, {"id": "GHSA-jjph-296x-mrcr", "fix_versions": ["4.51.0"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_imports()` function within `dynamic_module_utils.py`. This vulnerability affects versions 4.49.0 and is fixed in version 4.51.0. The issue arises from a regular expression pattern `\\s*try\\s*:.*?except.*?:` used to filter out try/except blocks from Python code, which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to remote code loading disruption, resource exhaustion in model serving, supply chain attack vectors, and development pipeline disruption."}, {"id": "GHSA-phhr-52qp-3mj4", "fix_versions": ["4.52.1"], "description": "Hugging Face Transformers versions up to 4.49.0 are affected by an improper input validation vulnerability in the `image_utils.py` file. The vulnerability arises from insecure URL validation using the `startswith()` method, which can be bypassed through URL username injection. This allows attackers to craft URLs that appear to be from YouTube but resolve to malicious domains, potentially leading to phishing attacks, malware distribution, or data exfiltration. The issue is fixed in version 4.52.1."}, {"id": "GHSA-37mw-44qp-f5jm", "fix_versions": ["4.52.1"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically within the DonutProcessor class's `token2json()` method. This vulnerability affects versions 4.51.3 and earlier, and is fixed in version 4.52.1. The issue arises from the regex pattern `<s_(.*?)>` which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to service disruption, resource exhaustion, and potential API service vulnerabilities, impacting document processing tasks using the Donut model."}]}, {"name": "typer", "version": "0.9.4", "vulns": []}, {"name": "types-python-dateutil", "version": "2.9.0.20250708", "vulns": []}, {"name": "types-requests", "version": "2.32.4.20250611", "vulns": []}, {"name": "types-tqdm", "version": "4.67.0.20250516", "vulns": []}, {"name": "typing-extensions", "version": "4.14.0", "vulns": []}, {"name": "typing-inspect", "version": "0.9.0", "vulns": []}, {"name": "typing-inspection", "version": "0.4.1", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "tzlocal", "version": "5.3.1", "vulns": []}, {"name": "ujson", "version": "5.10.0", "vulns": []}, {"name": "unidiff", "version": "0.7.5", "vulns": []}, {"name": "uri-template", "version": "1.3.0", "vulns": []}, {"name": "urllib3", "version": "1.26.20", "vulns": [{"id": "GHSA-pq67-6m6q-mj2v", "fix_versions": ["2.5.0"], "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level."}]}, {"name": "uvicorn", "version": "0.27.0", "vulns": []}, {"name": "validators", "version": "0.35.0", "vulns": []}, {"name": "virtualenv", "version": "20.31.2", "vulns": []}, {"name": "vulture", "version": "2.14", "vulns": []}, {"name": "wasabi", "version": "1.1.3", "vulns": []}, {"name": "watchdog", "version": "6.0.0", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "wcmatch", "version": "8.5.2", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "weasel", "version": "0.3.4", "vulns": []}, {"name": "weasyprint", "version": "65.1", "vulns": []}, {"name": "webcolors", "version": "24.11.1", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "weblinx", "version": "0.3.2", "vulns": []}, {"name": "weblinx-browsergym", "version": "0.0.3", "vulns": []}, {"name": "webrtcvad", "version": "2.0.10", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "12.0", "vulns": []}, {"name": "werkzeug", "version": "3.1.3", "vulns": []}, {"name": "wheel", "version": "0.45.1", "vulns": []}, {"name": "widgetsnbextension", "version": "4.0.14", "vulns": []}, {"name": "win32-setctime", "version": "1.2.0", "vulns": []}, {"name": "wmctrl", "version": "0.5", "vulns": []}, {"name": "wmi", "version": "1.5.1", "vulns": []}, {"name": "wrapt", "version": "1.17.2", "vulns": []}, {"name": "wsproto", "version": "1.2.0", "vulns": []}, {"name": "xxhash", "version": "3.5.0", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "zipp", "version": "3.23.0", "vulns": []}, {"name": "zope-event", "version": "5.1", "vulns": []}, {"name": "zope-interface", "version": "7.2", "vulns": []}, {"name": "zopfli", "version": "0.2.3.post1", "vulns": []}, {"name": "zstandard", "version": "0.23.0", "vulns": []}], "fixes": []}
